The princess saw a frog.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The princess saw a frog.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The princess saw a frog.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The princess, a frog]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [saw]
  >> Starting extraction centered on action 'SAW'
  >> ACTORS:[princess]
  >> OBJECTS:[frog]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The princess]
  >> Storing current set for future use: [The princess]
  >> Currently formed event:
        [[The princess], saw, [frog], [], '', '']
  >> All unspliced events:
        [[[The princess], saw, [frog], [], '', '']]
  >> Extracted events from user input:
        [The princess, saw, frog, None, '', '']
  >> Noun chunks extracted: [The princess, a frog]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'PRINCESS'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SAW'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        princess -> CapableOf() -> saw 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): princess --(CapableOf)--> see
        frog -> ReceivesAction() -> saw 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): frog --(ReceivesAction)--> see
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'FROG'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
done.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        done.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        done.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [done]
  >> Starting extraction centered on action 'DONE'
  >> ACTORS:[]
  >> OBJECTS:[]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> No actors found. Using previous actor set: []
  >> Currently formed event:
        [[], done, [], [], '', '']
  >> All unspliced events:
        [[[], done, [], [], '', '']]
  >> Extracted events from user input:
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Target token: 'DONE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
Exit.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        Exit.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        Exit.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [Exit]
  >> Entities extracted: [Exit]
  >> Target token: 'EXIT'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The end.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The end.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The end.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [The end]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'END'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
Yes.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        Yes.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        Yes.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Target token: 'YES'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
Goodbye.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        Goodbye.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        Goodbye.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: [Goodbye]
  >> Target token: 'GOODBYE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The end.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The end.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The end.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [The end]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'END'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The end.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The end.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The end.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [The end]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'END'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
No.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        No.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        No.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Target token: 'NO'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
