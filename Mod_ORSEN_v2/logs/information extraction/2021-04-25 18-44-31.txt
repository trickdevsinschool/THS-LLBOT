The king saw a dog.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The king saw a dog.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The king saw a dog.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The king, a dog]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [saw]
  >> Starting extraction centered on action 'SAW'
  >> ACTORS:[king]
  >> OBJECTS:[dog]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The king]
  >> Storing current set for future use: [The king]
  >> Currently formed event:
        [[The king], saw, [dog], [], '', '']
  >> All unspliced events:
        [[[The king], saw, [dog], [], '', '']]
  >> Extracted events from user input:
        [The king, saw, dog, None, '', '']
  >> Noun chunks extracted: [The king, a dog]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SAW'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        king -> CapableOf() -> saw 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): king --(CapableOf)--> see
        dog -> ReceivesAction() -> saw 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): dog --(ReceivesAction)--> see
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'DOG'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
