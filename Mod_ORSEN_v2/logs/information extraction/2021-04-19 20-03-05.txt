The king ate a pie.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The king ate a pie.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The king ate a pie.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The king, a pie]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [ate]
  >> Starting extraction centered on action 'ATE'
  >> ACTORS:[king]
  >> OBJECTS:[pie]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The king]
  >> Storing current set for future use: [The king]
  >> Currently formed event:
        [[The king], ate, [pie], [], '', '']
  >> All unspliced events:
        [[[The king], ate, [pie], [], '', '']]
  >> Extracted events from user input:
        [The king, ate, pie, None, '', '']
  >> Noun chunks extracted: [The king, a pie]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'ATE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        king -> CapableOf() -> ate 	(type 1, negated: False, flipped: False)
  >> Increasing the score of CapableOf --(eat)--> -1 from 0.0 to 2.0
        pie -> ReceivesAction() -> ate 	(type 1, negated: False, flipped: False)
  >> Increasing the score of ReceivesAction --(eat)--> -1 from 0.0 to 2.0
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'PIE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
thThe king became full.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The king became full.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The king became full.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The king]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [became]
  >> Starting extraction centered on action 'BECAME'
  >> ACTORS:[king]
  >> OBJECTS:[]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The king]
  >> Storing current set for future use: [The king]
  >> Currently formed event:
        [[The king], became, [], [], '', '']
  >> All unspliced events:
        [[[The king], became, [], [], '', '']]
  >> Extracted events from user input:
        [The king, became, None, None, '', '']
  >> Noun chunks extracted: [The king]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'BECAME'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        king -> CapableOf() -> became 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): king --(CapableOf)--> become
        king -> HasProperty(ROOT) -> full 	(type 0, negated: False, flipped: False)
  >> Adding new concept from -1(???): king --(HasProperty)--> full
  >> Target token: 'FULL'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The queen saw the king eating the pie.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The queen saw The king eating a pie.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The queen saw The king eating a pie.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The queen, The king, a pie]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [saw, eating]
  >> Starting extraction centered on action 'SAW'
  >> ACTORS:[queen]
  >> OBJECTS:[]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The queen]
  >> Storing current set for future use: [The queen]
  >> Currently formed event:
        [[The queen], saw, [], [], '', '']
  >> Starting extraction centered on action 'EATING'
  >> ACTORS:[king]
  >> OBJECTS:[pie]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The king]
  >> Storing current set for future use: [The king]
  >> Currently formed event:
        [[The king], eating, [pie], [], '', '']
  >> All unspliced events:
        [[[The queen], saw, [], [], '', ''], [[The king], eating, [pie], [], '', '']]
  >> Extracted events from user input:
        [The queen, saw, None, None, '', '']
        [The king, eating, pie, None, '', '']
  >> Noun chunks extracted: [The queen, The king, a pie]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'QUEEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SAW'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        queen -> CapableOf() -> saw 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): queen --(CapableOf)--> see
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'EATING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'PIE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The queen is shocked.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The queen is shocked.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The queen is shocked.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [The queen]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'QUEEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'IS'
  >> Extracted the following templates:
  >> (nsubj, be[IsA], attr), (nsubj, [CapableOf], ROOT), (nsubjpass, auxpass[ReceivesAction], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SHOCKED'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
5 feet.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        5 feet.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        5 feet.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [5 feet]
  >> Entities extracted: [5 feet]
  >> Target token: '5'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'FEET'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
help.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        help.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        help.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [help]
  >> Entities extracted: []
  >> Target token: 'HELP'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
flesh.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        flesh.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        flesh.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [flesh]
  >> Entities extracted: []
  >> Target token: 'FLESH'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The queen finds a purse.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        The queen finds a purse.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        The queen finds a purse.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [The queen, a purse]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [finds]
  >> Starting extraction centered on action 'FINDS'
  >> ACTORS:[queen]
  >> OBJECTS:[purse]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [The queen]
  >> Storing current set for future use: [The queen]
  >> Currently formed event:
        [[The queen], finds, [purse], [], '', '']
  >> All unspliced events:
        [[[The queen], finds, [purse], [], '', '']]
  >> Extracted events from user input:
        [The queen, finds, purse, None, '', '']
  >> Noun chunks extracted: [The queen, a purse]
  >> Entities extracted: []
  >> Target token: 'THE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'QUEEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'FINDS'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        queen -> CapableOf() -> finds 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): queen --(CapableOf)--> find
        purse -> ReceivesAction() -> finds 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): purse --(ReceivesAction)--> find
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'PURSE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
red.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        red.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        red.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Target token: 'RED'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
The purse is big.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        a purse is big.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        a purse is big.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [a purse]
  >> Entities extracted: []
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'PURSE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'IS'
  >> Extracted the following templates:
  >> (nsubj, be[IsA], attr), (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        purse -> HasProperty(ROOT) -> big 	(type 0, negated: False, flipped: False)
  >> Adding new concept from -1(???): purse --(HasProperty)--> big
  >> Target token: 'BIG'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
orsen suggest.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        orsen suggest.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        orsen suggest.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [suggest]
  >> Starting extraction centered on action 'SUGGEST'
  >> ACTORS:[orsen]
  >> OBJECTS:[]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [orsen]
  >> Storing current set for future use: [orsen]
  >> Currently formed event:
        [[orsen], suggest, [], [], '', '']
  >> All unspliced events:
        [[[orsen], suggest, [], [], '', '']]
  >> Extracted events from user input:
        [orsen, suggest, None, None, '', '']
  >> Noun chunks extracted: []
  >> Entities extracted: []
  >> Target token: 'ORSEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SUGGEST'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        orsen -> CapableOf() -> suggest 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): orsen --(CapableOf)--> suggest
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
orsen hint.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        orsen hint.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        orsen hint.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [hint]
  >> Entities extracted: []
  >> Target token: 'ORSEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        hint -> ReceivesAction() -> orsen 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): hint --(ReceivesAction)--> orsen
  >> Target token: 'HINT'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
orsen + hint.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        orsen + hint.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        orsen + hint.
Inferred sentence type: DESCRIPTION_EVENT
  >> Noun chunks extracted: [hint]
  >> Entities extracted: []
  >> Target token: 'ORSEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '+'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'HINT'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
