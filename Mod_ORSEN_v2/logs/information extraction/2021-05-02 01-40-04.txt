A king eats an apple.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        A king eats an apple.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        A king eats an apple.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [A king, an apple]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [eats]
  >> Starting extraction centered on action 'EATS'
  >> ACTORS:[king]
  >> OBJECTS:[apple]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> New set after converting actor tokens to actor noun chunks: [A king]
  >> Storing current set for future use: [A king]
  >> Currently formed event:
        [[A king], eats, [apple], [], '', '']
  >> All unspliced events:
        [[[A king], eats, [apple], [], '', '']]
  >> Extracted events from user input:
        [A king, eats, apple, None, '', '']
  >> Noun chunks extracted: [A king, an apple]
  >> Entities extracted: []
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'EATS'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        king -> CapableOf() -> eats 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): king --(CapableOf)--> eat
        apple -> ReceivesAction() -> eats 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): apple --(ReceivesAction)--> eat
  >> Target token: 'AN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'APPLE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
Then the prince eating soup.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        Then A king eating soup.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        Then A king eating soup.
Inferred sentence type: ACTION_EVENT
  >> Noun chunks extracted: [Then A king, soup]
  >> Entities extracted: []
  >> Inferred sentence voice: ACTIVE
  >> Inferred sentence actions: [eating]
  >> Starting extraction centered on action 'EATING'
  >> ACTORS:[]
  >> OBJECTS:[soup]
  >> ADVERBS:[]
  >> PREPOSITIONS:
  >> OBJECT OF PREPOSITIONS:
  >> No actors found. Using previous actor set: []
  >> Currently formed event:
        [[], eating, [soup], [], '', '']
  >> All unspliced events:
        [[[], eating, [soup], [], '', '']]
  >> Extracted events from user input:
  >> Noun chunks extracted: [Then A king, soup]
  >> Entities extracted: []
  >> Target token: 'THEN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'KING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'EATING'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'SOUP'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
There is a brown big bear.
Entering EizenExtractor.parse_user_input()
  >> Sentence after coreference resolution via coref_resolve():
        There is a brown big bear.
  >> Annotating resolved sentence. Start processing by splitting into different sentences.
  >> Sentence to parse:
        There is a brown big bear.
Inferred sentence type: CREATION_EVENT
  >> Extracted creation events from user input:
        [bear]
  >> Noun chunks extracted: [a brown big bear]
  >> Entities extracted: []
  >> Target token: 'THERE'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'IS'
  >> Extracted the following templates:
  >> (nsubj, be[IsA], attr), (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (nsubj, ROOT[HasProperty], acomp), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'A'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (ROOT, det[ReceivesAction], dobj), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'BROWN'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'BIG'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
  >> Target token: 'BEAR'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
        bear -> HasProperty() -> brown 	(type 1, negated: False, flipped: False)
  >> Adding new concept from -1(???): bear --(HasProperty)--> brown
  >> Target token: '.'
  >> Extracted the following templates:
  >> (nsubj, [CapableOf], ROOT), (amod, [HasProperty], nsubj), (ROOT, [ReceivesAction], dobj), (amod, [HasProperty], dobj), (amod, [HasProperty], pobj), (amod, [HasProperty], attr)
  >> Extracted relations:
